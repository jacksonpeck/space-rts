//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""player"",
            ""id"": ""93677a8b-6369-4317-9266-9f6c68a530ba"",
            ""actions"": [
                {
                    ""name"": ""clickLeft"",
                    ""type"": ""Button"",
                    ""id"": ""04ef298d-975d-48b4-b588-d731d7a4cec4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""clickRight"",
                    ""type"": ""Button"",
                    ""id"": ""0a554c43-ff4f-4353-9140-1205678a14e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""clickMiddle"",
                    ""type"": ""Button"",
                    ""id"": ""88d7342f-7c7c-40b0-9086-8f5a68aed005"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""cursor"",
                    ""type"": ""Value"",
                    ""id"": ""efc0fd1a-f08c-4885-941e-aca813e20d33"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""move"",
                    ""type"": ""Value"",
                    ""id"": ""8d77c669-1748-447a-846f-9e8de49ce920"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""zoom"",
                    ""type"": ""Button"",
                    ""id"": ""dc275f6b-0cfe-44f0-880a-7bcecf9973bc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ctrl"",
                    ""type"": ""Button"",
                    ""id"": ""099862e2-aecd-4b26-81ae-f16398843663"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""90214e1c-170b-46c8-ac21-a51106150d9f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""clickLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cbf3a622-a14d-4a48-8a34-290ee7f47c3c"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""clickRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5ae0957-68d0-4b90-b7b0-ebaeb2b38fed"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""clickMiddle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57fc035a-24a1-4515-aa30-d95570e6a400"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""cursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""7cf67833-fee4-4a3f-b8ec-27843410a999"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8f547094-4930-472b-aad4-1a14ea72aeb3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""cae40a5b-4add-43ca-b1c3-349f001561d5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""47bba4ed-f30b-4c60-92bb-ad96ba7b35f5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f058b9f1-ad7d-462a-ba30-41ce363e51dc"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""70e254b3-9a1b-4093-8a09-84e0d56f4ad2"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""zoom"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""ff257e41-dd51-4528-a697-c5ce82b8c992"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f39263b9-1d33-41d2-9e2f-3fc45ac44c03"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""bc421598-e040-45d4-baf9-c5ef80dcc9b4"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ctrl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // player
        m_player = asset.FindActionMap("player", throwIfNotFound: true);
        m_player_clickLeft = m_player.FindAction("clickLeft", throwIfNotFound: true);
        m_player_clickRight = m_player.FindAction("clickRight", throwIfNotFound: true);
        m_player_clickMiddle = m_player.FindAction("clickMiddle", throwIfNotFound: true);
        m_player_cursor = m_player.FindAction("cursor", throwIfNotFound: true);
        m_player_move = m_player.FindAction("move", throwIfNotFound: true);
        m_player_zoom = m_player.FindAction("zoom", throwIfNotFound: true);
        m_player_ctrl = m_player.FindAction("ctrl", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // player
    private readonly InputActionMap m_player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_player_clickLeft;
    private readonly InputAction m_player_clickRight;
    private readonly InputAction m_player_clickMiddle;
    private readonly InputAction m_player_cursor;
    private readonly InputAction m_player_move;
    private readonly InputAction m_player_zoom;
    private readonly InputAction m_player_ctrl;
    public struct PlayerActions
    {
        private @Controls m_Wrapper;
        public PlayerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @clickLeft => m_Wrapper.m_player_clickLeft;
        public InputAction @clickRight => m_Wrapper.m_player_clickRight;
        public InputAction @clickMiddle => m_Wrapper.m_player_clickMiddle;
        public InputAction @cursor => m_Wrapper.m_player_cursor;
        public InputAction @move => m_Wrapper.m_player_move;
        public InputAction @zoom => m_Wrapper.m_player_zoom;
        public InputAction @ctrl => m_Wrapper.m_player_ctrl;
        public InputActionMap Get() { return m_Wrapper.m_player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @clickLeft.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnClickLeft;
                @clickLeft.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnClickLeft;
                @clickLeft.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnClickLeft;
                @clickRight.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnClickRight;
                @clickRight.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnClickRight;
                @clickRight.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnClickRight;
                @clickMiddle.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnClickMiddle;
                @clickMiddle.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnClickMiddle;
                @clickMiddle.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnClickMiddle;
                @cursor.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCursor;
                @cursor.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCursor;
                @cursor.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCursor;
                @move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @zoom.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnZoom;
                @zoom.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnZoom;
                @zoom.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnZoom;
                @ctrl.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCtrl;
                @ctrl.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCtrl;
                @ctrl.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCtrl;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @clickLeft.started += instance.OnClickLeft;
                @clickLeft.performed += instance.OnClickLeft;
                @clickLeft.canceled += instance.OnClickLeft;
                @clickRight.started += instance.OnClickRight;
                @clickRight.performed += instance.OnClickRight;
                @clickRight.canceled += instance.OnClickRight;
                @clickMiddle.started += instance.OnClickMiddle;
                @clickMiddle.performed += instance.OnClickMiddle;
                @clickMiddle.canceled += instance.OnClickMiddle;
                @cursor.started += instance.OnCursor;
                @cursor.performed += instance.OnCursor;
                @cursor.canceled += instance.OnCursor;
                @move.started += instance.OnMove;
                @move.performed += instance.OnMove;
                @move.canceled += instance.OnMove;
                @zoom.started += instance.OnZoom;
                @zoom.performed += instance.OnZoom;
                @zoom.canceled += instance.OnZoom;
                @ctrl.started += instance.OnCtrl;
                @ctrl.performed += instance.OnCtrl;
                @ctrl.canceled += instance.OnCtrl;
            }
        }
    }
    public PlayerActions @player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnClickLeft(InputAction.CallbackContext context);
        void OnClickRight(InputAction.CallbackContext context);
        void OnClickMiddle(InputAction.CallbackContext context);
        void OnCursor(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
        void OnCtrl(InputAction.CallbackContext context);
    }
}
